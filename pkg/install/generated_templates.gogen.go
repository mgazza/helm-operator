// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 9, 5, 12, 46, 42, 127566909, time.UTC),
		},
		"/flux-helm-operator-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-helm-operator-account.yaml.tmpl",
			modTime:          time.Date(2019, 8, 16, 22, 12, 21, 704276153, time.UTC),
			uncompressedSize: 948,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x39\x6f\xdc\x30\x10\x85\x7b\xfe\x8a\x01\x5c\x38\x09\x2c\x05\xee\x02\x75\xb6\x8b\x14\x09\x52\x28\x47\x13\xa4\x18\x92\x4f\x59\xc6\x5c\x8e\x30\x24\x37\x87\xb0\xff\x3d\x90\xb4\x06\xbc\x8e\xed\x34\xdb\x8d\xe6\xd2\x9b\xc7\xaf\x69\x1a\x73\x46\x9f\x36\xa0\x0c\xdd\x05\x07\x62\xe7\xa4\xa6\x72\x41\x2e\xd6\x5c\xa0\xa4\x12\x91\x2f\x88\x93\x3f\x4a\x91\x0d\xc9\x87\xf4\x9d\x58\x61\xce\x48\x52\xfc\x4d\x09\xf0\xf0\x34\x88\xd2\xbb\x6a\xa1\x09\x05\x99\x7e\x86\xb2\x59\x46\x1a\xcb\x19\x7e\xfe\x03\x72\x26\x27\xa9\xa8\x44\x7a\xd1\x5f\x5f\xdd\xbc\x6c\x0d\x8f\xe1\x0b\x34\x07\x49\x1d\xed\x2e\xcd\x6d\x48\xbe\xa3\x8f\xab\xaa\xab\x55\x94\xd9\xa2\xb0\xe7\xc2\x9d\x21\x8a\x6c\x11\xf3\x1c\x11\x25\xde\xa2\xa3\x21\xd6\x5f\xcd\x06\x71\xdb\xc8\x08\xe5\x22\x6a\x9e\x2e\x4d\x13\x85\x81\xda\x0f\xbc\x45\x1e\xd9\x81\xf6\xfb\x43\xf7\xf2\xd9\xd1\x34\x1d\x57\xa7\x89\x90\xfc\x7e\x6f\x66\xcf\xee\x8b\x55\xcb\xae\xe5\x5a\x36\xa2\xe1\x0f\x97\x20\xa9\xbd\x7d\x93\xdb\x20\xaf\x77\x97\x16\x85\xef\x6e\xb9\x59\xdd\xeb\x25\xe2\x94\x87\x18\xad\x11\xcb\x78\x43\x3c\x86\xb7\x2a\x75\xcc\x1d\x7d\x3d\x7f\x75\xfe\x6d\xd9\xa9\xc8\x52\xd5\xe1\x28\xb9\x83\xda\x7b\x89\x86\x92\xa4\xfe\xd0\xf8\xb9\x7f\xff\x74\xef\x09\xae\xbf\x5e\xc9\x39\xad\x09\x12\xd1\x63\x98\x17\xdc\x99\xf0\x8c\x36\x43\xf4\xef\x9b\x3c\xb3\x3d\x57\xfb\x03\xae\x1c\x5c\x7e\x14\xcd\xff\x08\x7f\x88\xd6\x43\xf6\x1e\xa3\x2d\xe6\x39\xf2\x18\xb8\xc6\xb2\xe2\x37\x53\xfa\x37\x00\x00\xff\xff\xad\xec\xff\x2b\xb4\x03\x00\x00"),
		},
		"/flux-helm-release-crd.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-helm-release-crd.yaml.tmpl",
			modTime:          time.Date(2019, 9, 5, 12, 46, 42, 127566909, time.UTC),
			uncompressedSize: 7634,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\x46\x13\x7d\xd7\xaf\x98\xcf\x5f\x01\xdb\x85\xc4\xdc\x8a\xa2\x15\x10\x24\x41\x8c\x34\xa9\x73\x31\xec\x38\x2f\x86\x0b\x8c\xc8\x21\xb9\xf5\x5e\xd8\xbd\xc8\x56\x8b\xfe\xf7\x62\x97\xa4\x24\x52\x14\x45\x25\xce\x43\x91\xf2\x25\xd1\x5e\x66\xcf\xcc\x9c\x39\x7b\xf1\x64\x32\x19\x61\xc1\x3e\x91\x36\x4c\xc9\x29\x60\xc1\xe8\xce\x92\xf4\xbf\x4c\x74\xf3\x93\x89\x98\x7a\x30\x7f\x34\x23\x8b\x8f\x46\x37\x4c\x26\x53\x78\xe9\x8c\x55\xe2\x9c\x8c\x72\x3a\xa6\x13\x4a\x99\x64\x96\x29\x39\x12\x64\x31\x41\x8b\xd3\x11\x80\x44\x41\x53\xc8\x89\x0b\x4d\x9c\xd0\x90\x89\xfc\x8f\x28\xe5\xee\x2e\x4e\x22\xa6\x46\xa6\xa0\xd8\x8f\xcc\xb4\x72\x45\x39\x74\xad\xb7\xb4\x60\xfc\x00\x80\x72\xdd\xd7\xc4\xc5\x79\x69\x2c\xb4\x72\x66\xec\x69\xbb\xe7\x2d\x33\x36\xf4\x16\xdc\x69\xe4\x4d\x08\xa1\xc3\xe4\x4a\xdb\xf7\x2b\xe3\x13\xc8\xf5\x08\xc0\xc4\xaa\xa0\x29\x84\x8e\x02\x63\x4a\x46\x00\x98\x24\xc1\x33\xe4\x67\x9a\x49\x4b\xfa\xa5\xe2\x4e\xc8\xe5\xc4\x5f\x2f\x3e\xbc\x3f\x43\x9b\x4f\x21\x32\x16\xad\x33\x51\xb5\x92\xb7\x12\xc6\xd4\x81\x58\xc7\x0d\x60\x17\x7e\x29\x63\x35\x93\xd9\x2e\x53\x17\xe1\x57\xc3\x58\xa3\x69\x90\xad\x58\xc9\xd2\x13\x73\xf5\xec\xe8\x79\xe4\xe7\x3c\x7d\x7a\x50\x81\x4a\x0e\x8e\xaf\x23\x41\xc6\x60\xd6\x04\xfd\xae\xd1\xd6\xbf\x50\x9d\xfb\x28\xd6\x84\x7e\xa5\x8f\x4c\x90\xb1\x28\x8a\x86\xc9\x17\x2d\x73\x09\x5a\xdf\x60\xdc\x4c\x57\x7c\xaa\x82\x5b\x02\x9f\xc2\x5f\x7f\x8f\x00\xe6\x35\x3b\xe7\x8f\x56\xbf\x96\x59\x28\x2d\x87\xae\x30\x93\xf4\x9c\x92\x29\x58\xed\xea\xb5\x8c\x55\x1a\x33\x5a\xb6\xcd\x91\xb3\x24\xa0\x2c\x6d\xa8\x82\xe4\x8b\xb3\x37\x9f\x9e\x5c\xc4\x39\x09\x9c\x56\xd3\x0a\xad\x0a\xd2\x96\xd5\x98\x82\xa9\x8a\xb5\xf5\xa7\xe9\x0f\xc7\xb4\x5f\xef\xea\x30\xce\x51\xdb\xc3\xeb\xb5\xde\x2e\x0b\xfe\xf3\xa4\xac\x4b\xae\xd1\x01\x90\x90\x89\x35\x2b\x02\x38\xf8\x98\x53\x20\x77\xed\x33\xd8\x9c\x19\xa8\x98\x01\x16\x75\x46\xd6\x44\xf0\x26\x05\xa9\x2c\x18\x57\x14\x9c\x51\x32\x06\x66\xe1\x96\x71\x0e\x09\xa5\xe8\xb8\x05\xab\x5a\xab\x00\xcc\x1f\x47\xad\xb6\x8d\x04\xaf\xf9\x81\xd6\x92\x96\x53\x38\xf8\x6d\x7e\xf5\x78\xfc\xe4\xfa\xbb\x83\xc6\x88\x35\xda\x0f\xf3\xa7\x76\xc1\xe7\xae\x07\xff\x8c\x20\x23\x49\x1a\x2d\x25\x30\x5b\x00\xa6\x29\xbb\x63\x32\x03\x9b\xd3\x86\x47\xb2\x2e\x5d\xb0\xca\x0f\x80\x9a\x52\xe5\x2a\x9f\xe5\xed\x15\x4e\xfe\x7c\x38\xf9\xf9\xfa\xe8\x6a\x52\xfd\xef\xfb\xba\xe9\xf8\x59\x2b\x08\x65\x3a\x96\x02\xb2\x7f\x20\xc2\xb4\x8e\x68\x78\x5f\x56\xce\xd5\x81\xf1\xad\x66\xa5\x33\xab\x0f\xcd\xa6\xf7\xa5\xe9\xaf\x1f\x02\x26\x48\x39\xdb\xeb\x7a\x70\x9b\x49\x63\x91\x73\x50\x1a\x5c\x91\x69\x4c\xa8\x9e\x0b\x4c\x82\x21\x2f\x58\xa6\x13\xae\xd7\xe1\x8c\x74\xab\x2f\x55\x5a\xa0\x0d\xbd\x3f\xfe\xd0\xa2\xa6\x21\xfb\x09\xb9\x6b\xd7\x60\x0b\xd6\x9b\x74\x19\xf1\x32\xc4\x61\xa2\x97\x0a\x47\x06\x94\x0c\x35\x5b\x83\xed\x44\x36\x53\x8a\x13\xca\x51\x0b\x57\x4c\x97\xe5\xa4\xfd\x96\x0f\x33\xcb\x60\x2d\x23\x94\x6b\xe5\xb2\x1c\x12\xe2\x64\xe9\x81\xa6\xa0\xb5\xc3\xc1\x68\xc5\xf9\x0c\xe3\x9b\x36\x90\x72\x86\x9a\xfd\x4e\xb1\x6d\xf3\x60\x8b\x80\xf9\x8f\x24\xce\xf8\x86\x57\x9d\x9e\x91\x1d\x97\x5e\x15\xa4\x7d\xaa\x96\x50\x8c\xf7\xb3\xa9\x6a\x4a\x2e\x1d\x4e\x91\x71\xa7\xa9\x4d\x84\x7e\x2f\x97\x61\xdf\x0f\x59\x19\xef\x65\xd1\xb8\xc2\x6f\x4d\xdb\x42\x0e\x2c\x05\x49\x94\x84\x53\xc2\x7e\xd0\x6a\x13\x5d\xe8\xfa\x67\x26\xcc\xf8\x80\xbf\x56\xea\xa6\x23\x1b\xbd\x51\xd7\x34\x27\x69\x21\xf7\x53\x21\xd5\x4a\x80\x76\x52\x7a\x21\x4d\x9c\xaf\xfe\x65\x3e\xf6\x06\xb5\xa5\xe2\x37\xf0\xf8\xe3\xc0\x5a\x69\x7b\x89\xbe\x45\x66\x43\xfa\x51\x2e\x80\xc9\x84\xcd\x59\xe2\x90\xc3\xa9\x9b\x91\x96\x64\x7d\xd9\x15\x5e\xfb\x99\x92\xe3\x0e\xfb\x50\x6f\x6f\xc1\xda\x93\x87\x0f\xb7\xe8\x06\xec\xd0\x0e\xe8\xd5\x0f\xff\x79\xa4\xfb\x45\x3c\xf8\xe6\xa4\x65\x3c\x68\xb1\x60\x92\x09\x27\x40\x3a\x31\x23\x0d\x2a\x85\x33\x95\x18\xff\x2f\xc2\x09\x15\x5c\x2d\x04\xc9\x76\xed\x95\x1f\xea\x10\x37\x04\x4d\x98\x2c\xc2\xb9\x88\x60\x46\xa9\xd2\x04\x02\xf5\x4d\xb5\x1b\x2e\xcb\x07\x0d\x18\x17\xc7\x64\x4c\xea\xf8\x5e\xe9\x0c\x52\xf7\x8a\x71\xba\xf0\x14\xb5\xfd\x72\x79\x42\x85\xa6\xd8\xef\xcb\xff\x83\x4b\x43\x95\x4e\xbe\xd2\x4a\x44\x26\x4c\x3f\xa5\xc5\x39\xa5\x41\xe8\x09\xdb\x65\x52\x82\x40\xad\x71\xd1\xea\x61\x96\x44\x07\xbb\x7b\x24\xaa\x79\x06\xf3\x9b\x5d\xe3\x08\x56\x7e\x7d\x3a\x56\x9d\x4d\xb7\x30\x6c\xcd\x67\xbf\xb5\xfb\x9c\x85\x9d\x37\x38\x39\x06\xe1\x8c\xf5\xbb\x31\x93\xcb\x0d\x79\x6d\xaf\xae\xb6\xe2\xf6\xcd\xa5\xdb\xbb\x8e\x8d\x78\x15\xd5\x6e\xcd\xbe\xaf\x08\xf6\x87\x27\x56\x32\x65\xd9\x3b\x2c\xca\x9c\x76\x47\xaa\xd7\x3e\x0c\xcb\xd2\x6e\x28\xd0\x9b\x2d\xe8\xcb\x58\xe9\x85\xc0\xe2\x9e\x92\x06\xfd\x27\xa8\xfa\xbb\xa1\xc5\x40\xb0\xa7\xb4\xa8\x11\x2d\xb1\x7a\x65\xcb\xc8\x86\xc6\xea\x28\xe2\xe5\x7b\xdc\x90\xbe\xb2\x23\x5a\xa0\xe8\x2a\xf8\xc1\x48\x55\x51\xde\x75\x07\xc2\xad\xf5\x6e\xa5\x36\xa0\xc9\x6a\x46\x73\xe4\x75\xcc\x6b\xc8\x8c\x13\x30\x03\x52\x01\x57\x32\x23\x0d\x02\x65\x82\x56\xe9\x36\x79\xdb\x80\xb7\x6d\x3b\x00\xeb\x2a\xf3\x2f\x65\xe4\xbd\x6a\x08\x7c\x45\x3a\x96\x40\xff\xe3\xe2\x36\x2e\xd2\x9d\xbf\x2c\x21\xbf\x08\x67\xc7\xfb\x21\xa4\xd3\xfc\xb3\xf9\xe8\xf4\xd0\xc0\x5d\x9e\xbf\x6d\xc6\xe7\x1b\xcb\x5c\x78\xb2\xf1\x67\x9e\xfb\x49\x5a\x81\x36\xff\xec\xac\xf9\xc9\x03\xa3\xe6\x87\xc2\x2d\xb3\x79\x55\xa0\xe1\x6e\x1a\x7c\x81\xa3\x70\xbc\xcf\x98\x05\x4d\x85\x3a\x86\xdb\x9c\x74\x23\xb9\x3e\x84\x5c\x85\xa3\xdb\xb7\x92\x67\x25\xe9\x43\x47\x7a\x27\xcd\xd7\xbb\xe6\x29\xa7\x23\x8d\xcd\xf1\xeb\x1b\xd0\xce\xc1\x1b\x0a\xb1\x73\xc6\x3a\x33\x5b\x83\xe7\xbb\x5f\x33\x62\x25\xad\xbf\xf1\xa9\xb4\xa7\xae\xb7\x52\x3b\xac\xdd\xb6\xdf\x19\xc4\x26\xe6\x8c\xd9\xc3\x31\x6c\xab\x82\xfe\x0a\xc8\xba\xaf\x58\x2d\xbf\x7e\x61\x36\x68\x16\x45\x59\xe4\xa7\x3c\xcf\x98\xcd\xdd\x2c\x8a\x95\x98\x2a\x9d\x3d\xf0\x9c\xdf\xef\x88\x5d\x7f\xf5\x0d\xd0\x57\xce\xff\xc3\x03\x5c\x42\x29\x93\xe5\xbb\xe3\x87\x17\x17\x1d\x93\xb6\x17\x6c\x03\xf3\x99\x2f\x56\x26\x0d\x4b\xca\x47\xbb\xba\x36\x0d\xf3\x94\xae\x0a\xb4\xde\xe2\xab\x2a\x66\x5d\x97\xd8\x9d\x5e\xe8\x6d\x22\xb6\x11\xc3\x99\x46\x19\xe7\xcd\xad\x5b\xa0\xb1\x9d\x97\xe3\x9d\xeb\x9a\x1b\x56\x9c\x50\x71\x19\xde\x4c\x06\x20\xa8\xc5\x20\x51\x64\x42\xa8\xb5\x93\x70\x98\x50\x71\x58\xbf\xbb\x1c\xa1\x31\x4e\x50\xcd\x2e\x7f\x3b\x5e\xa9\x17\xf2\xf2\x2e\x9c\x3a\x9e\x32\xce\x29\x39\xee\x01\xdd\xad\x09\x4d\xde\xae\xb2\xe1\xe9\x1b\x8e\x82\x63\x38\xac\xde\xdc\xf7\x66\xf2\xca\xda\x80\x50\x54\x8f\xc0\x4b\x36\x5c\x9e\xbf\xfd\x32\xfe\x3a\xcd\x87\xf2\x77\xe0\xb5\x77\x8d\x96\xb2\xeb\xbd\x79\x00\xbc\x79\xf7\xdf\x3a\xfa\x17\xab\x26\x7d\x59\x38\x0c\x89\x39\xe9\xa1\x11\x09\x0b\x9f\x39\xce\xcb\x27\x90\x6e\xbc\xf7\x7a\x1f\x68\xe7\x7f\x86\x86\xc5\x80\xce\xe6\x70\xe4\x21\x33\x51\xf0\x40\xff\x6d\x2c\xdf\x88\xc6\x3f\x01\x00\x00\xff\xff\x11\x60\x36\x8c\xd2\x1d\x00\x00"),
		},
		"/helm-operator-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "helm-operator-deployment.yaml.tmpl",
			modTime:          time.Date(2019, 8, 16, 22, 21, 48, 614656271, time.UTC),
			uncompressedSize: 6000,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x4f\x73\xdb\xb8\x15\xbf\xfb\x53\xbc\xb1\x0f\xb9\x58\xa4\x33\x9b\xdd\x03\x33\x39\xb4\x9b\x6e\x92\x99\x24\xf5\xd4\x99\xce\xf4\xb4\xfb\x04\x3e\x89\xa8\x40\x80\x05\x1e\xa5\xb2\x9e\xed\x67\xef\x3c\x80\xa2\x48\x51\x92\xed\xf4\xd0\xf2\x62\x19\xc0\xfb\xff\x7b\x7f\x80\xc5\x62\x71\x85\x8d\xfe\x2b\xf9\xa0\x9d\x2d\x00\x9b\x26\xe4\xdb\xd7\x57\x1b\x6d\xcb\x02\xde\x53\x63\x5c\x57\x93\xe5\xab\x9a\x18\x4b\x64\x2c\xae\x00\x2c\xd6\x54\xc0\xca\xb4\xff\x5c\x54\x64\xea\x85\x6b\xc8\x23\x3b\xff\xf8\x08\x7a\x05\xd9\x57\xac\x29\x34\xa8\x08\x7e\xff\xbd\x3f\x1d\xff\x2d\xe0\xf1\x71\xba\xfb\xf8\x08\x64\x4b\x39\x16\x1a\x52\xc2\xda\x53\x63\xb4\xc2\x50\xc0\xeb\x2b\x80\x40\x86\x14\x3b\x2f\x3b\x00\x35\xb2\xaa\x3e\xe3\x92\x4c\x48\x0b\xe7\x35\x11\x5a\xf6\xc8\xb4\xee\xd2\x51\xee\x1a\x2a\xe0\x2f\xa4\x3c\x21\xd3\x15\x00\x53\xdd\x18\x64\xea\x59\x8f\xac\x93\xcf\x4c\xa4\x5c\x94\x23\x1f\x5a\xeb\x18\x59\x3b\x3b\xa2\x69\xbc\xab\x89\x2b\x6a\x43\xa6\x5d\x1e\x94\x47\x51\xe1\x9a\x7d\x4b\xd7\xf1\xd0\xde\xe6\xf8\x9b\xfc\x56\x2b\xfa\x83\x52\xae\xb5\xfc\xf5\xb2\xb8\xad\x33\x6d\x4d\xa1\xe8\xfd\xfd\x27\x8b\x4b\x43\xdf\xb4\x31\xe4\xbf\x7d\x7e\x48\x5e\x4f\xdf\xa2\xd7\x3c\x72\x61\x13\x16\x0a\x87\x3d\x00\xe5\xec\x4a\xaf\xbf\x60\x53\x8c\x16\xe7\xc6\x26\xba\x45\x3a\x3d\x39\x59\xd2\x0a\x5b\xc3\x5f\x5c\x49\x05\xdc\xfd\x74\x77\x77\x41\x30\x79\x0e\x23\xe2\x20\xa1\xe0\xa9\xe0\xb4\x96\x8c\xef\x6d\x1b\xac\xfa\x99\x3c\x3f\x0c\xfb\x09\x3b\x97\x77\xc9\x04\xf9\x75\x64\x07\x79\x3e\xa0\xee\xbc\x2d\x6f\xee\xee\x0e\x2c\xfa\x73\x37\xfb\xbf\xf0\x37\xd7\xc2\x4e\x1b\x03\x96\xa8\x04\xae\x28\x10\xf0\xce\xed\x03\x23\x9a\x77\x72\x04\x2d\x03\x3b\xa0\xc0\xb8\x34\x3a\x54\xb0\x45\xa3\x4b\x64\x2a\xe1\xdb\xe7\x87\x81\x9d\x72\xd6\x92\x8a\xf0\x01\x5c\xa3\xb6\x81\x21\x99\x36\x93\x7c\x3e\xa0\x37\xa7\x02\x7a\xf3\xec\x80\xde\x5c\x0c\xe8\x0d\x24\xef\xc6\x3c\x82\x4d\xbb\x24\x6f\x89\x29\x22\x9b\x4d\x98\xa9\x37\x77\xfa\x48\xcc\x34\xf4\x37\xff\xcb\xd0\x9f\xb2\xfa\xcd\xc1\xea\xc7\x47\xb2\xe5\xe8\xf0\xb7\x8a\x60\xe5\x8c\x71\x3b\x6d\xd7\x7d\xb4\x41\x07\x58\x39\x0f\x6d\x90\x35\x04\xd5\x06\x76\xb5\x0e\x54\xc2\xc6\xba\x9d\xfd\xb5\x72\x81\x03\xac\xb4\xa1\xdb\x81\xd1\xae\xd2\xaa\x4a\x18\x39\xc0\xc8\x41\xe9\xf6\xd0\x11\x22\xf9\xe1\xc1\xed\x2c\xac\x35\x4b\x65\x74\xe0\x91\xab\x03\x2a\x80\x2b\xb4\xbd\xe0\xb5\xe6\xaa\x5d\x82\xf3\x02\x47\x30\x7a\x43\x99\xc0\xf4\x95\x31\x80\x26\xb8\x41\x44\x2d\xf5\x05\xf4\x21\x1e\xda\xb2\x8b\x34\xca\x59\x46\x6d\xc9\xdf\xc2\x92\x8c\xdb\x65\x27\x61\x5f\x63\x97\x18\xee\x04\xcf\xec\xa4\xcc\x6d\x75\x49\x80\x16\x42\xa8\x7e\x4d\xa0\x3a\x32\x57\x3a\x88\x76\x56\xf4\xac\x9d\xa7\xa4\xb7\xb3\x04\xbf\x7d\x2a\x65\x8b\xbb\x5f\xb4\xa1\xdf\xde\x46\x47\x0a\xfc\xd1\x2a\xba\xed\x7d\xf1\xca\xd3\xc0\x28\xd9\x3a\xe5\xf1\x41\xf3\xc7\x76\x19\xfd\x93\xc1\xd7\x3f\x46\x5b\xc8\xb2\xef\x60\x43\x1d\x84\xca\xb5\xa6\x84\xe5\x81\xc7\x75\x52\xf1\xba\x77\x66\x62\x74\x7d\xd0\xfd\x5a\xe4\x46\x37\x51\x09\xda\xc2\xbf\xf3\x2c\x84\x2a\x9f\xbb\x63\x0f\xf6\x10\xaa\x52\xfb\x17\xa5\x61\x08\xd5\xd3\xe9\x97\x6a\x90\xa4\xc2\xc3\xc3\xc7\x09\xc4\xaf\x0e\x69\xf9\xf0\x31\x9a\xc9\x0e\x50\x29\x0a\x21\x9a\xff\xa1\xc7\x4b\xd0\xec\x7c\x37\x2b\xca\x6b\xcd\x8b\x0d\x75\x2f\xab\xc6\x73\x25\xc6\x87\x67\x9a\x47\x90\x93\x1d\x1c\xe9\x09\xcb\x85\xb3\xa6\xbb\x85\x1d\xc1\xce\xd9\x57\x0c\x4b\x02\xe9\x5c\xa2\xbc\xaa\x6a\x57\x5e\xbd\xa0\xe4\xea\x30\xe4\xdf\x1e\x25\x43\x0a\x0e\xe9\xc2\x15\x1e\x80\x2e\x84\x41\x60\xba\xf7\x99\x80\x2d\x39\xed\x2d\x50\xb6\xce\x6e\x01\xf7\x60\x2a\xe3\xe0\x23\xa7\x32\xf8\xb4\x1a\x58\x4c\xe4\xfc\xbd\x0d\x1c\x01\x18\x5a\x55\x45\x79\xb7\xd1\xf9\xbd\x2b\x46\xd9\x30\xd0\xa3\x11\x37\x74\xd0\x38\x6d\x39\x00\x32\xe4\xc4\x2a\x17\x48\x94\xb9\x80\x4c\xf7\xe9\x00\x18\x00\xf7\xe2\x45\xec\xa1\x72\xf4\x3d\xa5\x0d\x74\x94\x07\x1b\xea\x6e\xa3\x86\xa3\x82\xb2\x4f\xce\x7d\x25\x19\xd8\x8c\x52\x15\x97\x6e\x4b\xb7\xb0\xd3\x5c\x89\x77\xa6\x29\xd9\x67\x52\x1c\xbd\xc4\x68\x42\x55\x0d\x4c\xc4\x89\xda\x46\xa3\x13\x58\xf6\x89\x4e\x25\x54\xe4\xe9\x7c\xca\x4c\x11\xf8\x9c\xa6\x10\xd3\x46\xc8\x52\x68\x2e\xa7\xcd\x77\x81\xef\x7c\xcd\x3f\xea\xee\xe8\x29\x62\x27\x72\x4f\x88\x1b\x92\x4d\x53\xc8\x3a\xac\xcd\x51\x01\x44\x5b\xf6\xb1\xe8\x9b\x04\x2a\x41\x8a\xf6\x71\xbc\xed\xb2\xd8\x59\x0c\x32\x93\x97\x7e\x22\xe1\x23\x29\x5a\x0a\xdb\x70\xa8\x5c\x83\x40\x8e\x7d\xc8\xd7\xe4\x53\x4e\xd4\xb8\xa1\x54\xc3\x85\x6f\x7e\x60\x7c\xb0\xfc\x7c\x2c\xc6\xba\x2f\x44\xf7\x97\x46\x25\x76\xd8\x31\x97\xcb\x22\xa2\x8e\x23\x8e\x54\x37\xdc\xbd\xd7\xbe\x80\xc7\xa1\xb0\x0d\xbd\x68\x98\xa7\xe7\x93\xc5\xd1\x50\xdc\xc7\xca\x53\x8c\x8f\x75\x70\x5d\xc8\x7c\x1f\xf8\x1a\x74\x8d\x6b\x4a\x5d\x7a\x42\x99\xc1\x2f\xda\xc6\xf9\x0d\x6a\xe9\xb7\x9e\x94\x5c\x75\x0e\xfc\x3c\x19\xc2\x40\xd2\x55\x23\x0f\xd8\xa6\x7b\x92\x64\x6e\xc5\xdc\x84\x22\xcf\xab\x76\x99\x95\x4e\x6d\xc8\x67\xca\xd5\xb9\xcf\x77\x84\x5b\xda\x39\xbf\x09\xf9\x44\x5a\xce\xb8\x0e\x23\xe6\x82\x09\xb9\xee\xc8\x55\x48\x54\x60\x5c\x4f\xb2\x06\x92\xcc\x02\x7a\xee\xda\xc5\x42\xa1\xca\x29\xdb\xe2\x75\x76\x97\xdd\x2d\xbc\x7a\x3d\xa5\xbb\x6f\x8d\xb9\x77\x46\xab\xae\x80\x4f\xab\xaf\x8e\xef\x3d\x85\xb1\x79\x8d\xf3\x3c\xba\xae\x0c\x93\x25\x73\x33\xbd\x23\xa4\x48\xdc\x3b\xcf\x05\xfc\x70\xf7\xc3\x61\xc8\x37\x7a\x4b\x96\x42\xb8\xf7\x6e\x49\xe3\xe6\x21\x3c\x3e\x1c\xf7\x93\x66\xce\x20\x2e\x23\x57\x05\xe4\x15\xa1\xe1\xea\x5f\xa3\x2d\x6d\x35\x6b\x34\xef\xc9\x60\xf7\x40\xca\xd9\xb2\xbf\x15\xee\x3f\xd6\x35\xb9\x96\x87\xbd\x1f\x87\x3d\x41\xbd\xfe\x3f\xd5\x2c\xb8\xd6\x2b\x0a\x63\x0d\x3c\xfd\xa3\xa5\xc0\x61\xaa\x95\x6a\xda\x02\x7e\xbc\xab\x27\x8b\x35\xd5\xce\x77\x05\xfc\xf4\xe6\x8b\x1e\x36\x52\x61\xfa\x22\xd5\x61\xc4\xe3\x06\x3e\x59\x65\xda\x92\x52\xb7\xec\x07\xcb\xe9\x1c\x78\x76\x5c\x75\x7e\xde\xbf\x84\xa5\x94\xb5\xb7\xfb\x2e\x33\x1a\x2c\x2b\xda\xb7\xe3\x92\x94\x41\x4f\x65\xea\x2b\xd9\x88\xf6\xe4\xbc\x94\x6a\x40\xd4\xe6\x3e\xf9\xdb\x3b\xc7\x71\xe4\x9a\x9c\x90\x90\xfe\xd9\x9a\xae\x00\xb9\x40\x3f\x31\x17\xc1\xc5\x61\x67\x2a\x6e\xd2\x80\xe7\x13\xc8\xf9\xae\x35\xd7\x7c\xc2\x6a\x7e\xcb\x7c\xba\xe4\xce\x59\x6e\xd1\xf7\x2c\x25\xe9\xf3\x13\x43\xdd\x33\xaa\xec\x0b\xd8\xe6\x91\xee\xfc\xc3\xc2\x09\x07\x9f\xbd\xe2\x9f\x73\x8e\x10\x4c\x8e\x4d\x63\x7b\x51\x04\x3e\x93\xff\xf1\xc9\x23\x11\x17\xc3\x7c\xc6\xa0\xf3\xd1\x9e\x18\x34\x07\xeb\x45\x11\xf8\x4c\xfe\xc7\x27\x67\xf9\x70\x04\x36\xf4\xeb\x49\x2d\xf8\xe8\x76\x92\xf6\x2b\x69\x78\x93\xb7\x05\xf1\xf2\x62\xc1\x71\x69\x31\xbc\xd5\xbd\x9b\x5c\xc2\x8f\xde\xec\x4e\xaf\xf6\x0e\xdd\xb4\x4b\x5a\x84\x2e\x30\xd5\x83\x56\x4f\x3f\x54\xdd\x80\x2c\xa4\x72\xd3\xfa\xf8\x94\x76\x4a\xbf\xfd\xcb\x05\x79\x5e\x48\x79\x7e\x37\xf7\x52\xae\x30\x53\x9e\xcf\x51\x53\xd4\xe1\xdd\x24\x2e\x47\x47\x36\xd4\x9d\x64\x9e\xb3\x09\xd9\x38\xff\x8f\x15\x3b\xa7\x55\x24\xbc\xa0\xd3\x96\xbc\x5e\x75\x17\x75\x7a\x9e\xd1\x27\x61\xfd\xb3\xab\x65\x2c\x07\xd7\xc6\x8b\xc3\xf9\xf7\xa8\xa7\xdf\xa1\x12\x84\xff\x9b\x68\xcc\xe8\x4f\xc5\x63\x76\xe8\xd9\x11\x99\xab\xf7\xec\x98\xcc\x48\x4f\x45\xe5\x3b\xcd\x3f\xa4\xe7\x7f\x02\x00\x00\xff\xff\x9e\xea\x11\xa6\x70\x17\x00\x00"),
		},
		"/tiller-ca-cert-configmap.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "tiller-ca-cert-configmap.yaml.tmpl",
			modTime:          time.Date(2019, 8, 16, 22, 21, 48, 614656271, time.UTC),
			uncompressedSize: 226,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x0a\xc2\x30\x0c\x40\xef\xfd\x8a\xfc\x40\x07\x82\xa7\xde\xa4\x78\x53\x2f\x0e\xef\xb1\xcd\xb4\xd8\x66\xa3\x8b\x22\xd4\xfe\xbb\x6c\x4c\xd1\x63\x78\x2f\x2f\x29\x05\x42\x07\xcd\x96\xf1\x1c\xa9\x0d\x31\x52\x6e\x77\x47\xa8\x55\x6b\xad\x70\x08\x27\xca\x63\xe8\xd9\xc0\x63\xa5\x6e\x81\xbd\x01\xdb\x73\x17\x2e\x7b\x1c\x54\x22\x41\x8f\x82\x46\x01\x30\x26\x32\xd0\xc5\xfb\x53\x5f\x29\x26\x2d\x71\xd4\x0e\xb5\x9b\xe5\xe5\xc8\x01\x13\x8d\x03\x3a\x82\x5a\x97\x95\x79\x34\x50\xca\x3f\x2d\x05\x88\xfd\xa4\x7d\xfa\x0e\x1b\x97\xc5\xc0\x4b\x4d\x31\xf6\xc4\x02\x6b\x68\xbe\x1f\xdb\x8d\xa5\x2c\xb6\x67\x99\xc8\x6f\xe1\x1d\x00\x00\xff\xff\x60\xd7\x1c\xac\xe2\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-helm-operator-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-helm-release-crd.yaml.tmpl"].(os.FileInfo),
		fs["/helm-operator-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/tiller-ca-cert-configmap.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
